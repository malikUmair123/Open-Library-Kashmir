@model Open_Library_Kashmir.Models.Book

@using Open_Library_Kashmir.Helpers

@{
    ViewBag.Title = "Book Details";
}

@using (Html.BeginForm("AddToWishlist", "Donation", FormMethod.Post, new { id = "wishlist" }))
{
    @Html.HiddenFor(m => m.BookId)
    @Html.HiddenFor(m => m.Title)
    @Html.HiddenFor(m => m.Author)
    @Html.HiddenFor(m => m.Publisher)
    @Html.HiddenFor(m => m.PublicationYear)
    @Html.HiddenFor(m => m.Condition)
    @Html.HiddenFor(m => m.Class)
    @Html.HiddenFor(m => m.Genre)
    @Html.HiddenFor(m => m.Subject)
    @Html.HiddenFor(m => m.ISBN)
    @Html.HiddenFor(m => m.ImageUrl)
    @Html.HiddenFor(m => m.ShortDescription)
    @Html.HiddenFor(m => m.Status)
    @Html.HiddenFor(m => m.AvailableAt)
    
    <!-- Include other hidden or visible input fields for other properties of the Book class -->
    
    <div class="container">
        <div class="row">
            <div class="d-md-none mt-2"></div> <!-- Add spacing on smaller screens -->
            <div class="col-md-4">
                @Html.Image(Model.ImageUrl, "Book Image Not Available")
            </div>
            <div class="d-md-none mt-4"></div> <!-- Add spacing on smaller screens -->
            <div class="col-md-8">
                <h2>@Model.Title</h2>
                @if (!string.IsNullOrEmpty(Model.Author))
                {
                    <p>@Html.DisplayNameFor(model => model.Author): @Html.DisplayFor(model => model.Author, new { @class = "text-muted" })</p>
                }

                @if (!string.IsNullOrEmpty(Model.Publisher))
                {
                    <p>@Html.DisplayNameFor(model => model.Publisher): @Html.DisplayFor(model => model.Publisher, new { @class = "text-muted" })</p>
                }

                @if (Model.PublicationYear.HasValue)
                {
                    <p>@Html.DisplayNameFor(model => model.PublicationYear): @Html.DisplayFor(model => model.PublicationYear, new { @class = "text-muted" })</p>
                }

                @if (!string.IsNullOrEmpty(Model.Class))
                {
                    <p>@Html.DisplayNameFor(model => model.@Class): @Html.DisplayFor(model => model.@Class, new { @class = "text-muted" })</p>
                }

                @if (!string.IsNullOrEmpty(Model.Subject))
                {
                    <p>@Html.DisplayNameFor(model => model.Subject): @Html.DisplayFor(model => model.Subject, new { @class = "text-muted" })</p>
                }

                @if (!string.IsNullOrEmpty(Model.ShortDescription))
                {
                    <p>@Html.DisplayNameFor(model => model.ShortDescription): @Html.DisplayFor(model => model.ShortDescription, new { @class = "text-muted" })</p>
                }

                @if (!string.IsNullOrEmpty(Model.Condition))
                {
                    <p>@Html.DisplayNameFor(model => model.Condition): @Html.DisplayFor(model => model.Condition, new { @class = "text-muted" })</p>
                }

                @if (!string.IsNullOrEmpty(Model.Status))
                {
                    <p>@Html.DisplayNameFor(model => model.Status): @Html.DisplayFor(model => model.Status, new { @class = "text-muted" })</p>
                }
                <hr>
                <div class="row">
                    <div class="col-auto">
                        <button type="submit" id="add-to-wishlist-btn" class="btn btn-primary btn-md">Add to Wishlist</button>
                    </div>
                    <div class="d-md-none mt-2"></div> <!-- Add spacing on smaller screens -->
                    <div class="col-auto">
                        @Html.ActionLink("Manage Wishlist »", "Wishlist", "Donation", routeValues: null, htmlAttributes: new { id = "mamagelink", title = "Manage", @class = "btn btn-outline-dark" })
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<hr>

<p>« @Html.ActionLink("Back to Book List", "Index", null, htmlAttributes: new { title = "Index" })</p>

@*<script src="~/Scripts/updatewishlistbutton.js"></script>*@

<script>
        $(document).ready(function () {
        // Check TempData["BookInWishlist"] value
        var bookInWishlist = '@TempData["BookInWishlist"]';

        // Update properties of "Add to Wishlist" button based on TempData value
        if (bookInWishlist === 'True') {
            // Book is already in wishlist
            var bookInWishlist = '@TempData["BookInWishlist"]';

            $('#add-to-wishlist-btn').prop('disabled', true);
            $('#add-to-wishlist-btn').text('Added to Wishlist');
            $('#add-to-wishlist-btn').removeClass('btn-primary').addClass('btn-success');
        } else {
            var bookInWishlist = '@TempData["BookInWishlist"]';

            // Book is not in wishlist
            $('#add-to-wishlist-btn').prop('disabled', false);
            $('#add-to-wishlist-btn').text('Add to Wishlist');
            $('#add-to-wishlist-btn').removeClass('btn-success').addClass('btn-primary');
        }
    });
</script>